<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hanson的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myhanson.com/"/>
  <updated>2017-11-05T05:39:26.453Z</updated>
  <id>http://myhanson.com/</id>
  
  <author>
    <name>Hanson Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HSStockChart介绍</title>
    <link href="http://myhanson.com/2017/11/04/HSStockChart%E4%BB%8B%E7%BB%8D/"/>
    <id>http://myhanson.com/2017/11/04/HSStockChart介绍/</id>
    <published>2017-11-04T08:13:47.448Z</published>
    <updated>2017-11-05T05:39:26.453Z</updated>
    
    <content type="html"><![CDATA[<p>HSStockChart 是一个绘制股票分时图、K 线图的库。支持流畅的回弹拖动，长按十字线，捏合放大缩小等功能，主要使用了 CAShapeLayer 来绘图，相比使用 Core Graphics 和重写 drawRect 的方法更高效，占用内存更小。<br><a href="https://github.com/zyphs21/HSStockChart" target="_blank" rel="external">GitHub 地址：HSStockChart</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/757687-92b2069869929ccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li style="list-style: none"><input type="checkbox" checked> 支持绘制分时图，五日分时图，K 线图，MA 线指标，交易量柱等。</li><li style="list-style: none"><input type="checkbox" checked> 支持横屏查看。</li><li style="list-style: none"><input type="checkbox" checked> K 线图利用 <code>UIScrollView</code> 达到流畅的滑动查看效果。</li><li style="list-style: none"><input type="checkbox" checked> 使用 <code>CAShapeLayer</code> 绘图，内存占用更小，效率更高。</li></ul><h2 id="版本需求"><a href="#版本需求" class="headerlink" title="版本需求"></a>版本需求</h2><ul><li>iOS 8.0+</li><li>Swift 3</li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li><p>之前绘图的方法是重写 <code>drawRect</code> 方法，在方法里获取 <code>CGContext</code> 然后利用Core Graphics 来进行绘图，调用 <code>setNeedsDisplay</code> 来刷新。但是这种方法有个问题是：</p><blockquote><p>一旦你实现了 CALayerDelegate 协议中的 -drawLayer:inContext: 方法或者 UIView 中的 -drawRect: 方法（其实就是前者的包装方法），图层就创建了一个绘制上下文，这个上下文需要的内存可从这个公式得出：图层宽x图层高x4字节，宽高的单位均为像素。对于一个在 Retina iPad 上的全屏图层来说，这个内存量就是 2048x1526x4字节，相当于12MB内存，图层每次重绘的时候都需要重新抹掉内存然后重新分配。【摘自 iOS Core Animation- Advanced Techniques 中文译本 高效绘图一章】</p></blockquote><p>因为我要达到流畅滑动查看的效果，所以在 <code>UIScrollView</code> 上添加了一个 <code>UIView</code> 这个 View 的宽度会依据当前展示数据的多少而变化，结合 <code>UIScrollView</code> 的 <code>ContentSize</code> 就能达到很好的滑动效果。</p><p><img src="http://upload-images.jianshu.io/upload_images/757687-36a3d278fd71fc4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>如果我用之前重写 <code>drawRect</code> 的方法，那么这个 View 会根据数据量的变大而变大，从而导致绘图内存急剧上升，数据量大的时候会崩溃。基于此，我采用了 <code>CAShapeLayer</code> 的方式绘图，此方式的特点如下：</p><blockquote><p>CAShapeLayer 是一个通过矢量图形而不是 bitmap 来绘制的图层子类。你指定诸如颜色和线宽等属性，用 CGPath 来定义想要绘制的图形，最后就自动渲染出来了。当然，你也可以用 Core Graphics 直接向原始的内容中绘制一个路径，相比之下，使用 CAShapeLayer 有以下一些优点:</p><ul><li>渲染快速。CAShapeLayer 使用了硬件加速，绘制同一图形会比用 Core Graphics 快很多。</li><li>高效使用内存。一个 CAShapeLayer 不需要像普通 CALayer 一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。 </li><li>不会被图层边界剪裁掉，一个 CAShapeLayer 可以在边界之外绘制。你的图层路径不会像在使用 Core Graphics 的普通 CALayer 一样被剪裁掉。</li><li>不会出现像素化。当你给 CAShapeLayer 做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化</li></ul></blockquote><p>最终在真机上测试(注意是在真机上测试)两种方式的结果如图，内存大大降低并且稳定在13M左右</p><p> <img src="http://upload-images.jianshu.io/upload_images/757687-a773aeda8ac7ff01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>自定义 CAShapeLayer，重写 action(forKey event: String) 方法。目的是 关闭 CAShapeLayer 的隐式动画，避免滑动时候或者十字线出现时有残影的现象(实际上是因为 Layer 的 position 属性变化而产生的隐式动画)</p></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HSCAShapeLayer</span>: <span class="title">CAShapeLayer</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(forKey event: String)</span></span> -&gt; <span class="type">CAAction</span>? &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Released under MIT License.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HSStockChart 是一个绘制股票分时图、K 线图的库。支持流畅的回弹拖动，长按十字线，捏合放大缩小等功能，主要使用了 CAShapeLayer 来绘图，相比使用 Core Graphics 和重写 drawRect 的方法更高效，占用内存更小。&lt;br&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义 UISegmentedControl 样式</title>
    <link href="http://myhanson.com/2017/11/04/%E8%87%AA%E5%AE%9A%E4%B9%89%20UISegmentedControl%20%E6%A0%B7%E5%BC%8F/"/>
    <id>http://myhanson.com/2017/11/04/自定义 UISegmentedControl 样式/</id>
    <published>2017-11-04T08:13:47.448Z</published>
    <updated>2017-11-05T05:37:32.798Z</updated>
    
    <content type="html"><![CDATA[<p>系统的 UISegmentedControl 是个挺方便的控件，这里来讲讲在 Swift3 下自定义 UISegmentedControl 的样式，包括修改底色，边框颜色等等。</p><p>要了解 UISegmentedControl 各个部分的组成，可以在官方的文档中找到 <a href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/UIKitUICatalog/UISegmentedControl.html" target="_blank" rel="external">UISegmentedControl 文档</a> 。着重注意这个图：</p><p>   <img src="http://upload-images.jianshu.io/upload_images/757687-3d89e1b80b4e17b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>上面这幅图明确的列出了 UISegmentedControl 各个部分所控制的方法。下面就开始自定义吧。</p><p>首先我们先做一个通过颜色生成图片的的一个扩展方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">renderImageWithColor</span>(<span class="title">_</span> <span class="title">color</span>: <span class="title">UIColor</span>, <span class="title">size</span>: <span class="title">CGSize</span>) -&gt; <span class="title">UIImage</span> </span>&#123;</div><div class="line">        <span class="type">UIGraphicsBeginImageContext</span>(size)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> context = <span class="type">UIGraphicsGetCurrentContext</span>() <span class="keyword">else</span> &#123;</div><div class="line">            <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">            <span class="keyword">return</span> <span class="type">UIImage</span>()</div><div class="line">        &#125;</div><div class="line">        context.setFillColor(color.cgColor);</div><div class="line">        context.fill(<span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: size.width, height: size.height));</div><div class="line">        <span class="keyword">let</span> img = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">        <span class="keyword">return</span> img ?? <span class="type">UIImage</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接着，我们可以为 UISegmentedControl 建立一个可以自定义颜色的扩展方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UISegmentedControl</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/// 自定义样式</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameters:</span></div><div class="line">    <span class="comment">///   - normalColor: 普通状态下背景色</span></div><div class="line">    <span class="comment">///   - selectedColor: 选中状态下背景色</span></div><div class="line">    <span class="comment">///   - dividerColor: 选项之间的分割线颜色</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setSegmentStyle</span><span class="params">(normalColor: UIColor, selectedColor: UIColor, dividerColor: UIColor)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> normalColorImage = <span class="type">UIImage</span>.renderImageWithColor(normalColor, size: <span class="type">CGSize</span>(width: <span class="number">1.0</span>, height: <span class="number">1.0</span>))</div><div class="line">        <span class="keyword">let</span> selectedColorImage = <span class="type">UIImage</span>.renderImageWithColor(selectedColor, size: <span class="type">CGSize</span>(width: <span class="number">1.0</span>, height: <span class="number">1.0</span>))</div><div class="line">        <span class="keyword">let</span> dividerColorImage = <span class="type">UIImage</span>.renderImageWithColor(dividerColor, size: <span class="type">CGSize</span>(width: <span class="number">1.0</span>, height: <span class="number">1.0</span>))</div><div class="line">        </div><div class="line">        setBackgroundImage(normalColorImage, <span class="keyword">for</span>: .normal, barMetrics: .<span class="keyword">default</span>)</div><div class="line">        setBackgroundImage(selectedColorImage, <span class="keyword">for</span>: .selected, barMetrics: .<span class="keyword">default</span>)</div><div class="line">        setDividerImage(dividerColorImage, forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .<span class="keyword">default</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> segAttributesNormal: <span class="type">NSDictionary</span> = [<span class="type">NSForegroundColorAttributeName</span>: <span class="type">UIColor</span>.gray, <span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)]</div><div class="line">        <span class="keyword">let</span> segAttributesSeleted: <span class="type">NSDictionary</span> = [<span class="type">NSForegroundColorAttributeName</span>: <span class="type">UIColor</span>.white,<span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)]</div><div class="line">        </div><div class="line">        <span class="comment">// 文字在两种状态下的颜色</span></div><div class="line">        setTitleTextAttributes(segAttributesNormal <span class="keyword">as</span> [<span class="type">NSObject</span> : <span class="type">AnyObject</span>], <span class="keyword">for</span>: <span class="type">UIControlState</span>.normal)</div><div class="line">        setTitleTextAttributes(segAttributesSeleted <span class="keyword">as</span> [<span class="type">NSObject</span> : <span class="type">AnyObject</span>], <span class="keyword">for</span>: <span class="type">UIControlState</span>.selected)</div><div class="line">        </div><div class="line">        <span class="comment">// 边界颜色、圆角</span></div><div class="line">        <span class="keyword">self</span>.layer.borderWidth = <span class="number">0.7</span></div><div class="line">        <span class="keyword">self</span>.layer.cornerRadius = <span class="number">5.0</span></div><div class="line">        <span class="keyword">self</span>.layer.borderColor = dividerColor.cgColor</div><div class="line">        <span class="keyword">self</span>.layer.masksToBounds = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个扩展方法我只暴露了三种颜色的修改，大家可以根据自己需求修改。<br>最后就是使用了，注意这里如果进行了自定义，不能用 autoLayout 了, 需指定 Segement 的位置大小，不然显示出来的效果被压缩成了一条线，我估计是 setBackgroundImage 的方法需要把 1x1 的颜色图片进行填充，如果不指定大小会出差错。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> segment = <span class="type">UISegmentedControl</span>(items: [<span class="string">"测试"</span>, <span class="string">"测试"</span>, <span class="string">"测试"</span>])</div><div class="line">segment.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">150</span>, height: <span class="number">40</span>)</div><div class="line">segment.setSegmentStyle(normalColor: <span class="type">UIColor</span>.clear, selectedColor: <span class="type">UIColor</span>.cyan, dividerColor: <span class="type">UIColor</span>.gray)</div><div class="line">segment.selectedSegmentIndex = <span class="number">0</span></div><div class="line">view.addSubview(segment)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/757687-b2cff0c753e73846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>个人比较喜欢用 extension 扩展方法，这里大家直接拷贝就能够使用了，祝大家自定义愉快吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统的 UISegmentedControl 是个挺方便的控件，这里来讲讲在 Swift3 下自定义 UISegmentedControl 的样式，包括修改底色，边框颜色等等。&lt;/p&gt;
&lt;p&gt;要了解 UISegmentedControl 各个部分的组成，可以在官方的文档中找
      
    
    </summary>
    
    
  </entry>
  
</feed>
